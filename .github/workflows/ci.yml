name: FauxDB-PG17 CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  # Lint and format check
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Check formatting
      run: cargo fmt -- --check

    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  # Build and test on multiple platforms
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust-version: [stable, beta]
        exclude:
          - os: windows-latest
            rust-version: beta
          - os: macos-latest
            rust-version: beta

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fauxdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@${{ matrix.rust-version }}
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust-version }}-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-server-dev-17 postgresql-contrib-17
        # Install mongosh for testing
        curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install postgresql@17 mongodb/brew/mongosh

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install PostgreSQL 17
        choco install postgresql17 --params '/Password:postgres'
        # Install mongosh
        choco install mongodb-shell

    - name: Setup PostgreSQL
      run: |
        # Create FauxDB database and user
        createdb -U postgres fauxdb || true
        psql -U postgres -c "CREATE USER fauxdb WITH PASSWORD 'fauxdb';" || true
        psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE fauxdb TO fauxdb;" || true
        psql -U postgres -c "ALTER USER fauxdb CREATEDB;" || true
        
        # Enable required extensions
        psql -U postgres -d fauxdb -c "CREATE EXTENSION IF NOT EXISTS btree_gin;" || true

    - name: Build FauxDB
      run: cargo build --release --verbose

    - name: Run unit tests
      run: cargo test --lib --verbose

    - name: Run integration tests
      run: |
        # Start FauxDB in background
        nohup ./target/release/fauxdb > fauxdb.log 2>&1 &
        FAUXDB_PID=$!
        
        # Wait for server to start
        sleep 10
        
        # Check if server is running
        if ! kill -0 $FAUXDB_PID 2>/dev/null; then
          echo "FauxDB failed to start"
          cat fauxdb.log
          exit 1
        fi
        
        # Wait for server to be ready
        for i in {1..30}; do
          if mongosh --host localhost --port 27018 --eval "db.runCommand({ping: 1})" >/dev/null 2>&1; then
            echo "FauxDB is ready"
            break
          fi
          echo "Waiting for FauxDB to be ready... ($i/30)"
          sleep 2
        done
        
        # Run the comprehensive test suite
        cargo test --test fauxdb_tests -- --nocapture
        
        # Clean up
        kill $FAUXDB_PID 2>/dev/null || true

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.rust-version }}
        path: |
          test_results.json
          fauxdb.log
        retention-days: 7

  # Code coverage
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fauxdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install tarpaulin
      run: cargo install cargo-tarpaulin

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-server-dev-17 postgresql-contrib-17
        curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Setup PostgreSQL
      run: |
        createdb -U postgres fauxdb || true
        psql -U postgres -c "CREATE USER fauxdb WITH PASSWORD 'fauxdb';" || true
        psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE fauxdb TO fauxdb;" || true
        psql -U postgres -c "ALTER USER fauxdb CREATEDB;" || true
        psql -U postgres -d fauxdb -c "CREATE EXTENSION IF NOT EXISTS btree_gin;" || true

    - name: Generate coverage report
      run: |
        cargo tarpaulin --out Html --output-dir coverage --verbose

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: coverage/
        retention-days: 30

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install cargo-audit
      run: cargo install cargo-audit

    - name: Run security audit
      run: cargo audit

  # Performance tests
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: fauxdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-server-dev-17 postgresql-contrib-17
        curl -fsSL https://www.mongodb.org/static/pgp/server-7.0.asc | sudo gpg -o /usr/share/keyrings/mongodb-server-7.0.gpg --dearmor
        echo "deb [ arch=amd64,arm64 signed-by=/usr/share/keyrings/mongodb-server-7.0.gpg ] https://repo.mongodb.org/apt/ubuntu jammy/mongodb-org/7.0 multiverse" | sudo tee /etc/apt/sources.list.d/mongodb-org-7.0.list
        sudo apt-get update
        sudo apt-get install -y mongodb-mongosh

    - name: Setup PostgreSQL
      run: |
        createdb -U postgres fauxdb || true
        psql -U postgres -c "CREATE USER fauxdb WITH PASSWORD 'fauxdb';" || true
        psql -U postgres -c "GRANT ALL PRIVILEGES ON DATABASE fauxdb TO fauxdb;" || true
        psql -U postgres -c "ALTER USER fauxdb CREATEDB;" || true
        psql -U postgres -d fauxdb -c "CREATE EXTENSION IF NOT EXISTS btree_gin;" || true

    - name: Build FauxDB (release)
      run: cargo build --release

    - name: Run performance tests
      run: |
        # Start FauxDB
        nohup ./target/release/fauxdb > fauxdb.log 2>&1 &
        FAUXDB_PID=$!
        sleep 10
        
        # Wait for server to be ready
        for i in {1..30}; do
          if mongosh --host localhost --port 27018 --eval "db.runCommand({ping: 1})" >/dev/null 2>&1; then
            echo "FauxDB is ready for performance tests"
            break
          fi
          sleep 2
        done
        
        # Run performance benchmarks
        echo "Running performance tests..."
        time cargo test --test fauxdb_tests test_comprehensive_suite -- --nocapture
        
        # Clean up
        kill $FAUXDB_PID 2>/dev/null || true

  # Build and publish Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: |
          pgelephant/fauxdb:latest
          pgelephant/fauxdb:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
