version: '3.8'

services:
  postgres:
    image: postgres:17-alpine
    container_name: fauxdb-postgres
    environment:
      POSTGRES_DB: fauxdb
      POSTGRES_USER: fauxdb
      POSTGRES_PASSWORD: fauxdb123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - fauxdb-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fauxdb -d fauxdb"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  fauxdb:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fauxdb-server
    environment:
      # Database configuration
      DATABASE_URL: postgresql://fauxdb:fauxdb123@postgres:5432/fauxdb
      
      # Server configuration
      FAUXDB_HOST: 0.0.0.0
      FAUXDB_PORT: 27018
      FAUXDB_MAX_CONNECTIONS: 1000
      
      # Logging
      RUST_LOG: info
      
      # Production settings
      FAUXDB_ENABLE_SSL: false
      FAUXDB_ENABLE_AUTH: false
    ports:
      - "27018:27018"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - fauxdb-network
    volumes:
      - ./config:/app/config:ro
      - fauxdb_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--host", "localhost", "--port", "27018", "--eval", "db.runCommand({ping: 1})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: MongoDB client for testing
  mongosh:
    image: mongo:7.0
    container_name: fauxdb-mongosh
    command: >
      sh -c "
        echo 'Waiting for FauxDB to be ready...' &&
        sleep 30 &&
        mongosh --host fauxdb --port 27018 --eval '
          print(\"✓ Connected to FauxDB!\");
          print(\"✓ Testing basic operations...\");
          db.test.insertOne({name: \"FauxDB\", version: \"1.0.0\"});
          db.test.find().forEach(printjson);
          print(\"✓ FauxDB is working correctly!\");
        '
      "
    depends_on:
      fauxdb:
        condition: service_healthy
    networks:
      - fauxdb-network
    profiles:
      - testing

volumes:
  postgres_data:
    driver: local
  fauxdb_logs:
    driver: local

networks:
  fauxdb-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
