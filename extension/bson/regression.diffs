diff -U3 /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_basic.out /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_basic.out
--- /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_basic.out	2025-08-26 00:27:48
+++ /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_basic.out	2025-08-26 03:16:31
@@ -1,112 +1,131 @@
 -- Basic BSON functionality tests
 -- Test basic type creation, input/output, and simple operations
-
--- Create extension
-CREATE EXTENSION
-
+-- Create extension if not exists
+CREATE EXTENSION IF NOT EXISTS bson;
 -- Test basic type creation
- ?column? 
-----------
- {}
+SELECT '{}'::bson;
+ bson 
+------
+ { }
 (1 row)
 
- ?column? 
-----------
- []
+SELECT '[]'::bson;
+ bson 
+------
+ { }
 (1 row)
 
- ?column? 
-----------
- "hello"
+SELECT '"hello"'::bson;
+         bson          
+-----------------------
+ { "value" : "hello" }
 (1 row)
 
- ?column? 
-----------
- 123
+SELECT '123'::bson;
+                  bson                  
+----------------------------------------
+ { "value" : { "$numberInt" : "123" } }
 (1 row)
 
- ?column? 
-----------
- true
+SELECT 'true'::bson;
+        bson        
+--------------------
+ { "value" : true }
 (1 row)
 
- ?column? 
-----------
- null
+SELECT 'null'::bson;
+        bson        
+--------------------
+ { "value" : null }
 (1 row)
 
 -- Test basic operators
- ?column? 
-----------
- "test"
+SELECT '{"name": "test"}'::bson -> 'name';
+       ?column?       
+----------------------
+ { "value" : "test" }
 (1 row)
 
+SELECT '{"name": "test"}'::bson ->> 'name';
  ?column? 
 ----------
  test
 (1 row)
 
+SELECT '{"name": "test"}'::bson ? 'name';
  ?column? 
 ----------
  t
 (1 row)
 
+SELECT '{"name": "test"}'::bson ? 'missing';
  ?column? 
 ----------
  f
 (1 row)
 
 -- Test array operations
- ?column? 
-----------
- "a"
+SELECT '["a", "b", "c"]'::bson -> '0';
+     ?column?      
+-------------------
+ { "value" : "a" }
 (1 row)
 
+SELECT '["a", "b", "c"]'::bson ->> '0';
  ?column? 
 ----------
  a
 (1 row)
 
 -- Test nested objects
+SELECT '{"user": {"name": "john", "age": 30}}'::bson -> 'user' -> 'name';
  ?column? 
 ----------
- "john"
+ 
 (1 row)
 
+SELECT '{"user": {"name": "john", "age": 30}}'::bson -> 'user' ->> 'age';
  ?column? 
 ----------
- 30
+ 
 (1 row)
 
 -- Test comparison operators
+SELECT '{"a": 1}'::bson = '{"a": 1}'::bson;
  ?column? 
 ----------
  t
 (1 row)
 
+SELECT '{"a": 1}'::bson != '{"a": 2}'::bson;
  ?column? 
 ----------
  t
 (1 row)
 
 -- Test containment operators
+SELECT '{"a": 1, "b": 2}'::bson @> '{"a": 1}'::bson;
  ?column? 
 ----------
  t
 (1 row)
 
+SELECT '{"a": 1}'::bson <@ '{"a": 1, "b": 2}'::bson;
  ?column? 
 ----------
  t
 (1 row)
 
 -- Test existence operators
+SELECT '{"a": 1, "b": 2}'::bson ?| ARRAY['a', 'c'];
  ?column? 
 ----------
  t
 (1 row)
 
+SELECT '{"a": 1, "b": 2}'::bson ?& ARRAY['a', 'b'];
  ?column? 
 ----------
  t
 (1 row)
+
diff -U3 /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_operators.out /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_operators.out
--- /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_operators.out	2025-08-26 00:33:16
+++ /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_operators.out	2025-08-26 03:16:31
@@ -1,113 +1,134 @@
 -- BSON operators functionality tests
-
 -- Test BSON query operators
+SELECT bson_eq_op('{"a": 1}'::bson, '{"a": 1}'::bson);
  bson_eq_op 
 ------------
  f
 (1 row)
 
+SELECT bson_ne_op('{"a": 1}'::bson, '{"a": 2}'::bson);
  bson_ne_op 
 ------------
- f
+ t
 (1 row)
 
+SELECT bson_gt_op('{"a": 2}'::bson, '{"a": 1}'::bson);
  bson_gt_op 
 ------------
  f
 (1 row)
 
+SELECT bson_lt_op('{"a": 1}'::bson, '{"a": 2}'::bson);
  bson_lt_op 
 ------------
  f
 (1 row)
 
+SELECT bson_gte_op('{"a": 2}'::bson, '{"a": 2}'::bson);
  bson_gte_op 
---------------
+-------------
  f
 (1 row)
 
+SELECT bson_lte_op('{"a": 1}'::bson, '{"a": 2}'::bson);
  bson_lte_op 
---------------
+-------------
  f
 (1 row)
 
 -- Test array operators
+SELECT bson_in_op('{"a": 1}'::bson, ARRAY['{"a": 1}'::bson, '{"a": 2}'::bson]);
  bson_in_op 
 ------------
  f
 (1 row)
 
+SELECT bson_nin_op('{"a": 1}'::bson, ARRAY['{"a": 2}'::bson, '{"a": 3}'::bson]);
  bson_nin_op 
 -------------
- f
+ t
 (1 row)
 
+SELECT bson_all_op('["a", "b", "c"]'::bson, ARRAY['a', 'b']);
  bson_all_op 
 -------------
  f
 (1 row)
 
+SELECT bson_size_op('["a", "b", "c"]'::bson, 3);
  bson_size_op 
 --------------
  f
 (1 row)
 
 -- Test type checking
+SELECT bson_type_op('{"a": 1}'::bson, 3);  -- Object type
  bson_type_op 
 --------------
  f
 (1 row)
 
+SELECT bson_type_op('["a", "b"]'::bson, 4); -- Array type
  bson_type_op 
 --------------
  f
 (1 row)
 
+SELECT bson_type_op('"hello"'::bson, 2);    -- String type
  bson_type_op 
 --------------
  f
 (1 row)
 
+SELECT bson_type_op('123'::bson, 1);        -- Double type
  bson_type_op 
 --------------
  f
 (1 row)
 
 -- Test regex operator
+SELECT bson_regex_op('"hello world"'::bson, 'hello');
  bson_regex_op 
 ---------------
  f
 (1 row)
 
+SELECT bson_regex_op('"test"'::bson, '^test$');
  bson_regex_op 
 ---------------
  f
 (1 row)
 
 -- Test modulo operator
+SELECT bson_mod_op('{"a": 7}'::bson, 3, 1);
  bson_mod_op 
 -------------
  f
 (1 row)
 
+SELECT bson_mod_op('{"a": 10}'::bson, 3, 1);
  bson_mod_op 
 -------------
  f
 (1 row)
 
 -- Test element match
+SELECT bson_elem_match_op('{"users": [{"name": "john", "age": 30}]}'::bson, '{"name": "john"}'::bson);
  bson_elem_match_op 
 --------------------
  f
 (1 row)
 
 -- Test exists operator
+SELECT bson_exists_op('{"a": 1, "b": 2}'::bson, 'a');
  bson_exists_op 
 ----------------
  f
 (1 row)
 
+SELECT bson_exists_op('{"a": 1, "b": 2}'::bson, 'c');
  bson_exists_op 
 ----------------
  f
 (1 row)
+
diff -U3 /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_indexes.out /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_indexes.out
--- /Users/ibrarahmed/pgelephant/jsonm/bson/test/expected/bson_indexes.out	2025-08-26 00:28:23
+++ /Users/ibrarahmed/pgelephant/jsonm/bson/results/bson_indexes.out	2025-08-26 03:16:31
@@ -1,102 +1,109 @@
 -- BSON indexing tests
 -- Test various index types and query performance
-
 -- Create test table
-CREATE TABLE
-
+CREATE TABLE bson_test (
+    id SERIAL PRIMARY KEY,
+    data bson
+);
 -- Insert test data
-INSERT 0 5
-
+INSERT INTO bson_test (data) VALUES
+    ('{"name": "john", "age": 30, "city": "new york"}'::bson),
+    ('{"name": "jane", "age": 25, "city": "los angeles"}'::bson),
+    ('{"name": "bob", "age": 35, "city": "chicago"}'::bson),
+    ('{"name": "alice", "age": 28, "city": "boston"}'::bson),
+    ('{"name": "charlie", "age": 32, "city": "seattle"}'::bson);
 -- Test B-tree index
-CREATE INDEX
-
+CREATE INDEX idx_bson_test_btree ON bson_test USING btree (data);
 -- Test queries using B-tree index
-                    QUERY PLAN                    
---------------------------------------------------
- Index Scan using idx_bson_test_btree on bson_test
-   Index Cond: (data = '{"name": "john", "age": 30, "city": "new york"}'::bson)
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data = '{"name": "john", "age": 30, "city": "new york"}'::bson;
+                                              QUERY PLAN                                              
+------------------------------------------------------------------------------------------------------
+ Seq Scan on bson_test
+   Filter: (data = '{ "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }'::bson)
 (2 rows)
 
- id |                                data                                
-----+--------------------------------------------------------------------
-  1 | {"name": "john", "age": 30, "city": "new york"}
+SELECT * FROM bson_test WHERE data = '{"name": "john", "age": 30, "city": "new york"}'::bson;
+ id |                                   data                                    
+----+---------------------------------------------------------------------------
+  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
 (1 row)
 
 -- Test hash index
-CREATE INDEX
-
+CREATE INDEX idx_bson_test_hash ON bson_test USING hash (data);
 -- Test queries using hash index
-                    QUERY PLAN                    
---------------------------------------------------
- Index Scan using idx_bson_test_hash on bson_test
-   Index Cond: (data = '{"name": "jane", "age": 25, "city": "los angeles"}'::bson)
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data = '{"name": "jane", "age": 25, "city": "los angeles"}'::bson;
+                                               QUERY PLAN                                                
+---------------------------------------------------------------------------------------------------------
+ Seq Scan on bson_test
+   Filter: (data = '{ "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }'::bson)
 (2 rows)
 
- id |                                      data                                      
+SELECT * FROM bson_test WHERE data = '{"name": "jane", "age": 25, "city": "los angeles"}'::bson;
+ id |                                     data                                     
 ----+------------------------------------------------------------------------------
-  2 | {"name": "jane", "age": 25, "city": "los angeles"}
+  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
 (1 row)
 
 -- Test GIN index (if supported)
 -- CREATE INDEX idx_bson_test_gin ON bson_test USING gin (data);
-
 -- Test containment queries
-                    QUERY PLAN                    
---------------------------------------------------
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data @> '{"city": "new york"}'::bson;
+                     QUERY PLAN                      
+-----------------------------------------------------
  Seq Scan on bson_test
-   Filter: (data @> '{"city": "new york"}'::bson)
+   Filter: (data @> '{ "city" : "new york" }'::bson)
 (2 rows)
 
- id |                                data                                
-----+--------------------------------------------------------------------
-  1 | {"name": "john", "age": 30, "city": "new york"}
+SELECT * FROM bson_test WHERE data @> '{"city": "new york"}'::bson;
+ id |                                   data                                    
+----+---------------------------------------------------------------------------
+  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
 (1 row)
 
 -- Test existence queries
-                    QUERY PLAN                    
---------------------------------------------------
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data ? 'age';
+           QUERY PLAN           
+--------------------------------
  Seq Scan on bson_test
    Filter: (data ? 'age'::text)
 (2 rows)
 
- id |                                data                                
-----+--------------------------------------------------------------------
-  1 | {"name": "john", "age": 30, "city": "new york"}
-  2 | {"name": "jane", "age": 25, "city": "los angeles"}
-  3 | {"name": "bob", "age": 35, "city": "chicago"}
-  4 | {"name": "alice", "age": 28, "city": "boston"}
-  5 | {"name": "charlie", "age": 32, "city": "seattle"}
+SELECT * FROM bson_test WHERE data ? 'age';
+ id |                                     data                                     
+----+------------------------------------------------------------------------------
+  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
+  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
+  3 | { "name" : "bob", "age" : { "$numberInt" : "35" }, "city" : "chicago" }
+  4 | { "name" : "alice", "age" : { "$numberInt" : "28" }, "city" : "boston" }
+  5 | { "name" : "charlie", "age" : { "$numberInt" : "32" }, "city" : "seattle" }
 (5 rows)
 
 -- Test comparison queries
-                    QUERY PLAN                    
---------------------------------------------------
- Index Scan using idx_bson_test_btree on bson_test
-   Index Cond: (data > '{"name": "a"}'::bson)
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data > '{"name": "a"}'::bson;
+                 QUERY PLAN                  
+---------------------------------------------
+ Seq Scan on bson_test
+   Filter: (data > '{ "name" : "a" }'::bson)
 (2 rows)
 
- id |                                data                                
-----+--------------------------------------------------------------------
-  1 | {"name": "john", "age": 30, "city": "new york"}
-  2 | {"name": "jane", "age": 25, "city": "los angeles"}
-  3 | {"name": "bob", "age": 35, "city": "chicago"}
-  4 | {"name": "alice", "age": 28, "city": "boston"}
-  5 | {"name": "charlie", "age": 32, "city": "seattle"}
+SELECT * FROM bson_test WHERE data > '{"name": "a"}'::bson;
+ id |                                     data                                     
+----+------------------------------------------------------------------------------
+  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
+  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
+  3 | { "name" : "bob", "age" : { "$numberInt" : "35" }, "city" : "chicago" }
+  4 | { "name" : "alice", "age" : { "$numberInt" : "28" }, "city" : "boston" }
+  5 | { "name" : "charlie", "age" : { "$numberInt" : "32" }, "city" : "seattle" }
 (5 rows)
 
 -- Test path queries
-                    QUERY PLAN                    
---------------------------------------------------
- Seq Scan on bson_test
-   Filter: ((data ->> 'age'::text))::integer > 30
-(2 rows)
-
- id |                                data                                
-----+--------------------------------------------------------------------
-  1 | {"name": "john", "age": 30, "city": "new york"}
-  3 | {"name": "bob", "age": 35, "city": "chicago"}
-  5 | {"name": "charlie", "age": 32, "city": "seattle"}
-(3 rows)
-
+EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data->>'age'::int > 30;
+ERROR:  invalid input syntax for type integer: "age"
+LINE 1: ... (COSTS OFF) SELECT * FROM bson_test WHERE data->>'age'::int...
+                                                             ^
+SELECT * FROM bson_test WHERE data->>'age'::int > 30;
+ERROR:  invalid input syntax for type integer: "age"
+LINE 1: SELECT * FROM bson_test WHERE data->>'age'::int > 30;
+                                             ^
 -- Clean up
-DROP TABLE
+DROP TABLE bson_test CASCADE;
