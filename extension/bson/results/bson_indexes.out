-- BSON indexing tests
-- Test various index types and query performance
-- Create test table
CREATE TABLE bson_test (
    id SERIAL PRIMARY KEY,
    data bson
);
-- Insert test data
INSERT INTO bson_test (data) VALUES
    ('{"name": "john", "age": 30, "city": "new york"}'::bson),
    ('{"name": "jane", "age": 25, "city": "los angeles"}'::bson),
    ('{"name": "bob", "age": 35, "city": "chicago"}'::bson),
    ('{"name": "alice", "age": 28, "city": "boston"}'::bson),
    ('{"name": "charlie", "age": 32, "city": "seattle"}'::bson);
-- Test B-tree index
CREATE INDEX idx_bson_test_btree ON bson_test USING btree (data);
-- Test queries using B-tree index
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data = '{"name": "john", "age": 30, "city": "new york"}'::bson;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Seq Scan on bson_test
   Filter: (data = '{ "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }'::bson)
(2 rows)

SELECT * FROM bson_test WHERE data = '{"name": "john", "age": 30, "city": "new york"}'::bson;
 id |                                   data                                    
----+---------------------------------------------------------------------------
  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
(1 row)

-- Test hash index
CREATE INDEX idx_bson_test_hash ON bson_test USING hash (data);
-- Test queries using hash index
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data = '{"name": "jane", "age": 25, "city": "los angeles"}'::bson;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Seq Scan on bson_test
   Filter: (data = '{ "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }'::bson)
(2 rows)

SELECT * FROM bson_test WHERE data = '{"name": "jane", "age": 25, "city": "los angeles"}'::bson;
 id |                                     data                                     
----+------------------------------------------------------------------------------
  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
(1 row)

-- Test GIN index (if supported)
-- CREATE INDEX idx_bson_test_gin ON bson_test USING gin (data);
-- Test containment queries
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data @> '{"city": "new york"}'::bson;
                     QUERY PLAN                      
-----------------------------------------------------
 Seq Scan on bson_test
   Filter: (data @> '{ "city" : "new york" }'::bson)
(2 rows)

SELECT * FROM bson_test WHERE data @> '{"city": "new york"}'::bson;
 id |                                   data                                    
----+---------------------------------------------------------------------------
  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
(1 row)

-- Test existence queries
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data ? 'age';
           QUERY PLAN           
--------------------------------
 Seq Scan on bson_test
   Filter: (data ? 'age'::text)
(2 rows)

SELECT * FROM bson_test WHERE data ? 'age';
 id |                                     data                                     
----+------------------------------------------------------------------------------
  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
  3 | { "name" : "bob", "age" : { "$numberInt" : "35" }, "city" : "chicago" }
  4 | { "name" : "alice", "age" : { "$numberInt" : "28" }, "city" : "boston" }
  5 | { "name" : "charlie", "age" : { "$numberInt" : "32" }, "city" : "seattle" }
(5 rows)

-- Test comparison queries
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data > '{"name": "a"}'::bson;
                 QUERY PLAN                  
---------------------------------------------
 Seq Scan on bson_test
   Filter: (data > '{ "name" : "a" }'::bson)
(2 rows)

SELECT * FROM bson_test WHERE data > '{"name": "a"}'::bson;
 id |                                     data                                     
----+------------------------------------------------------------------------------
  1 | { "name" : "john", "age" : { "$numberInt" : "30" }, "city" : "new york" }
  2 | { "name" : "jane", "age" : { "$numberInt" : "25" }, "city" : "los angeles" }
  3 | { "name" : "bob", "age" : { "$numberInt" : "35" }, "city" : "chicago" }
  4 | { "name" : "alice", "age" : { "$numberInt" : "28" }, "city" : "boston" }
  5 | { "name" : "charlie", "age" : { "$numberInt" : "32" }, "city" : "seattle" }
(5 rows)

-- Test path queries
EXPLAIN (COSTS OFF) SELECT * FROM bson_test WHERE data->>'age'::int > 30;
ERROR:  invalid input syntax for type integer: "age"
LINE 1: ... (COSTS OFF) SELECT * FROM bson_test WHERE data->>'age'::int...
                                                             ^
SELECT * FROM bson_test WHERE data->>'age'::int > 30;
ERROR:  invalid input syntax for type integer: "age"
LINE 1: SELECT * FROM bson_test WHERE data->>'age'::int > 30;
                                             ^
-- Clean up
DROP TABLE bson_test CASCADE;
